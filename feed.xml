<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://www.makeworld.space/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.makeworld.space/" rel="alternate" type="text/html" /><updated>2021-04-30T13:02:40-04:00</updated><id>https://www.makeworld.space/feed.xml</id><title type="html">www.makeworld.space</title><subtitle>makeworld's website.</subtitle><entry><title type="html">NFTs</title><link href="https://www.makeworld.space/2021/03/nfts.html" rel="alternate" type="text/html" title="NFTs" /><published>2021-03-19T00:00:00-04:00</published><updated>2021-03-19T00:00:00-04:00</updated><id>https://www.makeworld.space/2021/03/nfts</id><content type="html" xml:base="https://www.makeworld.space/2021/03/nfts.html">&lt;p&gt;I just looove NFTs, don‚Äôt you?!! No problems or concerns, just the perfect way to share the value of art with everyone.
And make some good honest money in the process!!&lt;/p&gt;

&lt;p&gt;That‚Äôs why I‚Äôve launched my own NFT marketplace, one that‚Äôs better than all the rest!! No fuss, no waiting, &lt;del&gt;no crypto&lt;/del&gt;,
no trouble at all. Check it out!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://enoughtea.makeworld.space/&quot;&gt;Enough Tea üçµ&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">I just looove NFTs, don‚Äôt you?!! No problems or concerns, just the perfect way to share the value of art with everyone. And make some good honest money in the process!!</summary></entry><entry><title type="html">Ditherpunk 2 ‚Äî beyond 1-bit</title><link href="https://www.makeworld.space/2021/02/dithering.html" rel="alternate" type="text/html" title="Ditherpunk 2 ‚Äî beyond 1-bit" /><published>2021-02-12T00:00:00-05:00</published><updated>2021-02-12T00:00:00-05:00</updated><id>https://www.makeworld.space/2021/02/dithering</id><content type="html" xml:base="https://www.makeworld.space/2021/02/dithering.html">&lt;p&gt;&lt;em&gt;Last updated: Apr. 30, 2021&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;This post contains some images that need to be viewed at 100% size to be seen correctly. If you normally browse
at a higher zoom level than 100%, please zoom out when you get to any of the images.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Just yesterday, I released my &lt;a href=&quot;https://github.com/makeworld-the-better-one/dither&quot;&gt;dithering library&lt;/a&gt;, written in Go.
It‚Äôs the product of many hours of research, experimentation, and refactoring. I‚Äôm
excited that it‚Äôs finally out, and to see what people create with it. Personally I‚Äôd like to create a CLI dithering
tool at some point that uses it.&lt;/p&gt;

&lt;p&gt;Creating this library required research into the different algorithms for dithering, and how to implement them.
Unfortunately, not all of that knowledge is easily found. It‚Äôs spread across blog posts, Wikipedia pages without
citations, old books, and code comments. Recently, Surma wrote an article called
&lt;a href=&quot;https://surma.dev/things/ditherpunk/&quot;&gt;Ditherpunk ‚Äî The article I wish I had about monochrome image dithering&lt;/a&gt;.
It is an invaluable resource that combines lots of knowledge about dithering into one place. The main thing missing
from the post, however, is going beyond ‚Äúmonochrome‚Äù. Surma shows us how to dither with a 1-bit palette of black and
white, but what about more shades of gray? What about colour images? With this blog post I‚Äôd like to explore those
techniques, taking them out of my code and into English, so you can easily apply them elsewhere.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First off, please read Surma‚Äôs post.&lt;/strong&gt; It explains what dithering is, how it works, and many different algorithms.
I don‚Äôt feel the need to explain these again, but merely add on what I‚Äôve learned.&lt;/p&gt;

&lt;h2 id=&quot;before-we-start&quot;&gt;Before we start&lt;/h2&gt;

&lt;p&gt;An HN commenter &lt;a href=&quot;https://news.ycombinator.com/item?id=26122642&quot;&gt;informed me&lt;/a&gt; that you cannot accurately represent
linear RGB with just 8-bits (0-255), you need at least 12. Because of this, I have updated the blog post to use
16-bit color (0-65535), and will be updating the library shortly. Make sure you do this in your code too!&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Dithering operations consist of at least two steps, applied to each pixel. Sometimes there are further steps, like
‚Äúmodify these nearby pixels‚Äù, but these are the basic ones.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Modify the pixel‚Äôs colour value.&lt;/li&gt;
  &lt;li&gt;Find the colour in the palette that is ‚Äúclosest‚Äù to that modified value and use that on the output image.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, we know from Surma‚Äôs post that step 1 must be done with linear RGB values. Otherwise, different values will be
affected differently ‚Äì for example adding 5 to each colour won‚Äôt affect all colours the same way.&lt;/p&gt;

&lt;p&gt;But what about step 2? How do we find the closest colour in the palette? In 1-bit dithering we don‚Äôt have to worry
about this, because anything above 0.5 is white, and anything below is black. But when your palette colours can be
anyhere in a 3D space, it is something that needs to be figured out.&lt;/p&gt;

&lt;p&gt;Perhaps surprisingly, we‚Äôre not looking for a way that matches human perception. In fact, we are using Euclidean
distance with linear RGB values, which doesn‚Äôt match human perception at all! Why is this?
Thomas Mansencal (&lt;a href=&quot;https://github.com/KelSolaar&quot;&gt;@KelSolaar&lt;/a&gt;) explains it best:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can factor out the observer [the human] because what you are interested in here is basically energy
conservation. The idea being that for a given pool of radiant power emitters, if you remove a certain number of
them, by how much must the radiant power of the remaining ones be increased to be the same as that of the full
pool. It is really a ratio and doing those operations in a linear space is totally appropriate!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This helped it click for me. Dithering can be thought of as trying to reconstruct the ‚Äúradiant power‚Äù of the original
pixel colours, while restricted to a certain set of ‚Äúemitters‚Äù, aka the palette colours. It is only with linearized
RGB values that we can properly measure the radiant power.&lt;/p&gt;

&lt;h2 id=&quot;random-noise-grayscale&quot;&gt;Random Noise (grayscale)&lt;/h2&gt;

&lt;p&gt;Random noise is a good one to start with, to show the differences between 1-bit dithering and larger palettes.&lt;/p&gt;

&lt;p&gt;Surma does this by basically just adding a random number from -0.5 to 0.5, and then thresholding it.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;grayscaleImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapSelf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;brightness&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;brightness&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In my library, there are two separate random noise functions. One is for grayscale, and one is for RGB. The grayscale
one looks like this:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;roundClamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;65535.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The math with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;min&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max&lt;/code&gt; is just to put the random value in the desired range. If we clean that up it‚Äôs more
understandable:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;roundClamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;65535.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rand()&lt;/code&gt; just represents a function that does whatever range we want, -0.5 to 0.5 in this case.&lt;/p&gt;

&lt;p&gt;So, obviously this is quite similar to what Surma does. The heavy lifing of the dithering in this case is done by the
other code, the part that finds the best palette colour.&lt;/p&gt;

&lt;p&gt;The main thing that‚Äôs worth noting here is how the rounding works. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;roundClamp&lt;/code&gt; rounds the value to an integer, and then
clamps it to the range 0-65535. But how is the rounding done?&lt;/p&gt;

&lt;p&gt;Another &lt;a href=&quot;https://news.ycombinator.com/item?id=26122642&quot;&gt;HN commenter&lt;/a&gt; shared &lt;a href=&quot;http://www.cplusplus.com/articles/1UCRko23/&quot;&gt;this link&lt;/a&gt;
which discusses different rounding methods, and the problems with the way rounding is often done. The best solution is to
use a rounding function that does this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Given a number exactly halfway between two values, round to the even value (zero is considered even here).&lt;/p&gt;

  &lt;p&gt;round( 1.7 ) ‚Äì&amp;gt; 2 round( 2.7 ) ‚Äì&amp;gt; 3&lt;br /&gt;
round( 1.5 ) ‚Äì&amp;gt; 2 round( 2.5 ) ‚Äì&amp;gt; 2&lt;br /&gt;
round( 1.3 ) ‚Äì&amp;gt; 1 round( 2.3 ) ‚Äì&amp;gt; 2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is not really about dithering, but this is a pretty important point to get things right mathematically.
Make sure you do it! Otherwise your outputs will be biased.&lt;/p&gt;

&lt;h2 id=&quot;random-noise-rgb&quot;&gt;Random Noise (RGB)&lt;/h2&gt;

&lt;p&gt;Back to random noise, but for colour this time.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roundClamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;65535.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roundClamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;65535.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roundClamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;65535.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And simplified:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roundClamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;65535.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roundClamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;65535.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roundClamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;65535.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pretty simple, it just adds randomness in each channel. This can be done with grayscale images too, but it won‚Äôt
work very well, because grayscale colours only actually have one dimension. So it will just not add as much
randomness as you would expect.&lt;/p&gt;

&lt;p&gt;Also note that usually you‚Äôll want the random ranges to be the same for R, G, and B.&lt;/p&gt;

&lt;p&gt;Here‚Äôs an example:&lt;/p&gt;

&lt;section class=&quot;carousel&quot;&gt;

&lt;figure&gt;
&lt;img class=&quot;dithered&quot; src=&quot;/assets/images/dithering/peppers.png&quot; /&gt;
&lt;figcaption&gt;
Original image
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img class=&quot;dithered&quot; src=&quot;/assets/images/dithering/random_noise_rgb_red-green-black.png&quot; /&gt;
&lt;figcaption&gt;
Random Noise (palette is red, green, black)
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/section&gt;

&lt;h2 id=&quot;ordered-dithering&quot;&gt;Ordered Dithering&lt;/h2&gt;

&lt;h3 id=&quot;modifying-threshold-matrices&quot;&gt;Modifying threshold matrices&lt;/h3&gt;

&lt;p&gt;Most of the resources online that talk about ordered dithering talk about a ‚Äúthreshold matrix‚Äù. ‚ÄúThresholding‚Äù is
how these matrices are applied for 1-bit dithering. You divide the matrix by whatever number is specified, scale
it to the colour value range, and compare it to each pixel in the image. If it‚Äôs less than the matrix value, make
it black, otherwise white. Obviously this doesn‚Äôt work with any other kind of palette. So what‚Äôs the solution?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Ordered_dithering&quot;&gt;Wikipedia&lt;/a&gt; offers an answer. Unfortunately there‚Äôs no citation,
but I‚Äôve confirmed independently that it works. Here it is with some of my own math added as well.&lt;/p&gt;

&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mn&gt;65535&lt;/mn&gt;&lt;mo&gt;√ó&lt;/mo&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;√ó&lt;/mo&gt;&lt;mrow&gt;&lt;mo fence=&quot;true&quot;&gt;(&lt;/mo&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;mo&gt;‚àí&lt;/mo&gt;&lt;mn&gt;0.5&lt;/mn&gt;&lt;mo fence=&quot;true&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;(65535 \times strength) \times \left( \frac{cell + 1}{max} - 0.5 \right)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;√ó&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.02778em;&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.03588em;&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;√ó&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:2.40003em;vertical-align:-0.95003em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;minner&quot;&gt;&lt;span class=&quot;mopen delimcenter&quot; style=&quot;top:0em;&quot;&gt;&lt;span class=&quot;delimsizing size3&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mopen nulldelimiter&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mfrac&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:1.37144em;&quot;&gt;&lt;span style=&quot;top:-2.314em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.23em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;frac-line&quot; style=&quot;border-bottom-width:0.04em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.677em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.01968em;&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.01968em;&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;‚Äã&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.686em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose nulldelimiter&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;‚àí&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;mclose delimcenter&quot; style=&quot;top:0em;&quot;&gt;&lt;span class=&quot;delimsizing size3&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;

&lt;p&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;cell&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.69444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.01968em;&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.01968em;&quot;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; is a single cell of the matrix.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;strength&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8888799999999999em;vertical-align:-0.19444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.02778em;&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.03588em;&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; is a percentage, usually a float from &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; to &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1.0&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;1.0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;. It‚Äôs the amount the matrix will be applied to the
image. The closer to zero it is, the smaller the range of input colors that will be dithered. Colors outside
that range will be quantized. Usually you‚Äôll want a strength of &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1.0&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;1.0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, to apply the matrix and dither fully, but
sometimes reducing it can be useful, to reduce noise in the output image. It is inversely proportional to contrast ‚Äì
that is, when you reduce the &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;strength&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8888799999999999em;vertical-align:-0.19444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.02778em;&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.03588em;&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, it is visually similar to increasing the contrast.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;strength&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8888799999999999em;vertical-align:-0.19444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.02778em;&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.03588em;&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; can also be negative, from &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; to &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;‚àí&lt;/mo&gt;&lt;mn&gt;1.0&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;-1.0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.72777em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;‚àí&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;. This is useful in certain cases where the matrix usually
makes things bright, like what Surma describes with Bayer matrices.&lt;/p&gt;

&lt;p&gt;Note that &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;65535&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;65535&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; is multiplied by &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;strength&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8888799999999999em;vertical-align:-0.19444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.02778em;&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.03588em;&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; because the colours in my code are in the range &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&quot;false&quot;&gt;[&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo separator=&quot;true&quot;&gt;,&lt;/mo&gt;&lt;mn&gt;65535&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;[0, 65535]&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;. If yours
are different you can change that number.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;max&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; is the value the entire matrix is divided by. It represents the maximum value of the matrix, and normalizes
it by dividing. Usually this is the product of the dimensions of the matrix. It can also be the
largest value in the matrix plus one.&lt;/p&gt;

&lt;p&gt;The result of applying this operation to each cell of the matrix is a new, precalculated matrix, which can be added
to a pixel‚Äôs colour value for dithering. Adding 0.5 does not need to happen in this case. In my library, I call the
function that does this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convThresholdToAddition&lt;/code&gt;, because that‚Äôs essentially the purpose of this ‚Äì converting
a threshold matrix into one that can be used for addition.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is designed for matrices that range from &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; to &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;‚àí&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;max - 1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.66666em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;‚àí&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;. If you‚Äôre using a matrix you found that
starts at &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, you‚Äôll usually just want to subtract one from each value when you program it, then apply the operation
I described above.&lt;/p&gt;

&lt;h3 id=&quot;using-a-modified-matrix&quot;&gt;Using a modified matrix&lt;/h3&gt;

&lt;p&gt;Now that you‚Äôve modified the matrix so it can be used for addition, it needs to be applied to the image. This is pretty
simple. Use modulus so the matrix values are tiled across the image, and add the same value in the R, G, and B channels.
If you‚Äôre using a grayscale image you can just apply it in the one channel, or still use RGB. Since the same value is
being added it doesn‚Äôt make much of a difference. Like always, make sure to clamp the values to the proper colour range.&lt;/p&gt;

&lt;p&gt;Doing all of this definitely works with colour images, but it‚Äôs not the greatest. Here‚Äôs an example, where the palette
is red, green, and black.&lt;/p&gt;

&lt;section class=&quot;carousel&quot;&gt;

&lt;figure&gt;
&lt;img class=&quot;dithered&quot; src=&quot;/assets/images/dithering/peppers.png&quot; /&gt;
&lt;figcaption&gt;
Original image
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img class=&quot;dithered&quot; src=&quot;/assets/images/dithering/bayer_16x16_red-green-black.png&quot; /&gt;
&lt;figcaption&gt;
Ordered dithering (Bayer 16x16)
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img class=&quot;dithered&quot; src=&quot;/assets/images/dithering/floyd-steinberg_red-green-black.png&quot; /&gt;
&lt;figcaption&gt;
Error diffusion dithering (Floyd-Steinberg)
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/section&gt;

&lt;p&gt;Here it is where the palette is red, green, black, and yellow.&lt;/p&gt;

&lt;section class=&quot;carousel&quot;&gt;

&lt;figure&gt;
&lt;img class=&quot;dithered&quot; src=&quot;/assets/images/dithering/bayer_16x16_red-green-yellow-black.png&quot; /&gt;
&lt;figcaption&gt;
Ordered dithering (Bayer 16x16)
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img class=&quot;dithered&quot; src=&quot;/assets/images/dithering/floyd-steinberg_red-green-yellow-black.png&quot; /&gt;
&lt;figcaption&gt;
Error diffusion dithering (Floyd-Steinberg)
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/section&gt;

&lt;p&gt;As you can see, it doesn‚Äôt really emulate any of the yellow in the first example, while Floyd-Steinberg can. Once yellow is added
to the palette it looks pretty good though.&lt;/p&gt;

&lt;h2 id=&quot;error-diffusion-dithering&quot;&gt;Error diffusion dithering&lt;/h2&gt;

&lt;p&gt;Error diffusion dithering is done pretty much the same way as Surma described. The main difference is that
the quantization error is measured for R, G, and B, instead of a single gray value. The final bit of (pseudo) code
looks like this:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;roundClamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;er&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;roundClamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;roundClamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The variables starting with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e&lt;/code&gt; represent the current quantization error.&lt;/p&gt;

&lt;h3 id=&quot;serpentine&quot;&gt;Serpentine&lt;/h3&gt;

&lt;p&gt;This is unrelated to color dithering, but it‚Äôs something my library does that Surma didn‚Äôt mention, and something I couldn‚Äôt
really find information on online ‚Äì serpentine dithering.&lt;/p&gt;

&lt;p&gt;This is when the horizontal direction of error diffusion dithering 
(usually left-to-right) reverses for every other line, going right-to-left. This is simple to implement, and improves results
by removing line artifacts.&lt;/p&gt;

&lt;p&gt;The one thing that was hard to find any info on was how you need to reflect the error diffusion
matrix horizontally every time you go backwards as well. Otherwise you modify pixels to your right that have already been
finalized.&lt;/p&gt;

&lt;p&gt;Here‚Äôs an example of the difference serpentine dithering makes, using the simple 2D error diffusion matrix, as it has the worst
artifacts.&lt;/p&gt;

&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mrow&gt;&lt;mo fence=&quot;true&quot;&gt;(&lt;/mo&gt;&lt;mtable rowspacing=&quot;0.15999999999999992em&quot; columnalign=&quot;center center&quot; columnspacing=&quot;1em&quot;&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&quot;0&quot; displaystyle=&quot;false&quot;&gt;&lt;mo lspace=&quot;0em&quot; rspace=&quot;0em&quot;&gt;‚àó&lt;/mo&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&quot;0&quot; displaystyle=&quot;false&quot;&gt;&lt;mn&gt;0.5&lt;/mn&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&quot;0&quot; displaystyle=&quot;false&quot;&gt;&lt;mn&gt;0.5&lt;/mn&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&quot;0&quot; displaystyle=&quot;false&quot;&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;/mtable&gt;&lt;mo fence=&quot;true&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;matrix:
\left(\begin{array}{cc}
* &amp;amp; 0.5 \\
0.5 &amp;amp; 0 \\
\end{array}
\right)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.65952em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.02778em;&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:2.40003em;vertical-align:-0.95003em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;minner&quot;&gt;&lt;span class=&quot;mopen delimcenter&quot; style=&quot;top:0em;&quot;&gt;&lt;span class=&quot;delimsizing size3&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mtable&quot;&gt;&lt;span class=&quot;arraycolsep&quot; style=&quot;width:0.5em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;col-align-c&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:1.45em;&quot;&gt;&lt;span style=&quot;top:-3.61em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;‚àó&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-2.4099999999999997em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;‚Äã&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.9500000000000004em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;arraycolsep&quot; style=&quot;width:0.5em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;arraycolsep&quot; style=&quot;width:0.5em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;col-align-c&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:1.45em;&quot;&gt;&lt;span style=&quot;top:-3.61em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-2.4099999999999997em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;‚Äã&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.9500000000000004em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;arraycolsep&quot; style=&quot;width:0.5em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose delimcenter&quot; style=&quot;top:0em;&quot;&gt;&lt;span class=&quot;delimsizing size3&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;

&lt;section class=&quot;carousel&quot;&gt;

&lt;figure&gt;
&lt;img class=&quot;dithered&quot; src=&quot;/assets/images/dithering/gradient.png&quot; /&gt;
&lt;figcaption&gt;
Original image
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img class=&quot;dithered&quot; src=&quot;/assets/images/dithering/simple2d.png&quot; /&gt;
&lt;figcaption&gt;
Regular error diffusion dithering
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img class=&quot;dithered&quot; src=&quot;/assets/images/dithering/simple2d_serpentine.png&quot; /&gt;
&lt;figcaption&gt;
Serpentine error diffusion dithering
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/section&gt;

&lt;p&gt;In my experience, it makes sense to always do serpentine dithering for the best results.&lt;/p&gt;

&lt;h3 id=&quot;strength&quot;&gt;Strength&lt;/h3&gt;

&lt;p&gt;In the ordered dithering section I talked about how a &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;strength&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8888799999999999em;vertical-align:-0.19444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.02778em;&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.03588em;&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; variable could be used to control
how much dithering was applied. This can also be done for error diffusion, and it appears some
graphical suites like ImageMagick even have this built-in, as is described &lt;a href=&quot;https://learn.adafruit.com/preparing-graphics-for-e-ink-displays?view=all&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is the modified pseudocode for making use of a strength value:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;roundClamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;er&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;roundClamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;roundClamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here‚Äôs an example of different strength values with Floyd-Steinberg dithering, with a palette of
red, green, yellow, and black.&lt;/p&gt;

&lt;section class=&quot;carousel&quot;&gt;

&lt;figure&gt;
&lt;img class=&quot;dithered&quot; src=&quot;/assets/images/dithering/peppers.png&quot; /&gt;
&lt;figcaption&gt;
Original image
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img class=&quot;dithered&quot; src=&quot;/assets/images/dithering/floyd-steinberg_red-green-yellow-black.png&quot; /&gt;
&lt;figcaption&gt;
strength = 1.0
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img class=&quot;dithered&quot; src=&quot;/assets/images/dithering/floyd-steinberg_strength_08.png&quot; /&gt;
&lt;figcaption&gt;
strength = 0.8
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img class=&quot;dithered&quot; src=&quot;/assets/images/dithering/floyd-steinberg_strength_05.png&quot; /&gt;
&lt;figcaption&gt;
strength = 0.5
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img class=&quot;dithered&quot; src=&quot;/assets/images/dithering/floyd-steinberg_strength_02.png&quot; /&gt;
&lt;figcaption&gt;
strength = 0.2
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/section&gt;

&lt;p&gt;As you can see, the strength variable is pretty much inversely proportional with contrast. A value like &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;0.8&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;0.8&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
might be good to reduce some noise in the image, but go too low and the colours will just be inaccurate. Sticking
to &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1.0&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;1.0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; is a reasonable default.&lt;/p&gt;

&lt;p&gt;However this does not apply to Bayer dithering of color images. As Surma mentions, Bayer matrices are fundamentally
biased to making images brighter. For color images, the bias occurs in all three RGB channels, and can distort
image colors overall, making the final dithered image look inaccurate. Several sites recommend a value like &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;0.64&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;0.64&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
(256/4), and in my experience it‚Äôs a good default for color image dithering, with Bayer as well as ordered dithering
in general.&lt;/p&gt;

&lt;h2 id=&quot;other-things&quot;&gt;Other things&lt;/h2&gt;

&lt;p&gt;This post is pretty long now, but I do have a few other things to share.&lt;/p&gt;

&lt;p&gt;One is about clustered-dot dithering. It looks like this:&lt;/p&gt;

&lt;div class=&quot;sidebyside&quot;&gt;
&lt;img class=&quot;dithered&quot; src=&quot;/assets/images/dithering/david.png&quot; /&gt;
&lt;img class=&quot;dithered&quot; src=&quot;/assets/images/dithering/david_ClusteredDotDiagonal8x8.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Currently my library just does clustered-dot dithering with &lt;a href=&quot;https://github.com/makeworld-the-better-one/dither/blob/v1.0.0/ordered_ditherers.go&quot;&gt;some preprogrammed matrices&lt;/a&gt;
I‚Äôve found around the Internet and in a couple books. I was unable to find any proper instructions on how to generate
a clustered-dot dither matrix, so that they can be created on the fly, and in any size. The books
I read hinted that it was possible, but I couldn‚Äôt find anything. &lt;strong&gt;If you know how to do this, please contact me!&lt;/strong&gt;
I will update my library and this post if I figure anything out.&lt;/p&gt;

&lt;p&gt;The other thing is that I used Joel Yuliluoma‚Äôs per-cell algorithm for creating Bayer matrices, as written &lt;a href=&quot;https://bisqwit.iki.fi/story/howto/dither/jy/#Appendix%202ThresholdMatrix&quot;&gt;here&lt;/a&gt;
(the second code block). Since I had to rewrite it in Go, it‚Äôs cleaner to read and understand than the original C.
If you‚Äôre interested in implementing this yourself, you might prefer reading it. My implementation is &lt;a href=&quot;https://github.com/makeworld-the-better-one/dither/blob/v1.0.0/pixelmappers.go#L102&quot;&gt;here&lt;/a&gt;.
It‚Äôs been tested to make sure it works the exact same as Yuliluoma‚Äôs.&lt;/p&gt;

&lt;h2 id=&quot;thanks&quot;&gt;Thanks&lt;/h2&gt;

&lt;p&gt;Thanks for reading! I hope this is helpful to anyone else who is interested in dithering. And if you know Go,
check out &lt;a href=&quot;https://github.com/makeworld-the-better-one/dither&quot;&gt;my library&lt;/a&gt;! Make something cool with it. üòÑ&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Looks like this is getting some traction on Hacker News! Feel free to comment &lt;a href=&quot;https://news.ycombinator.com/item?id=26120631&quot;&gt;there&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">Last updated: Apr. 30, 2021</summary></entry><entry><title type="html">Don‚Äôt use the LGPL for Go code</title><link href="https://www.makeworld.space/2021/01/lgpl_go.html" rel="alternate" type="text/html" title="Don‚Äôt use the LGPL for Go code" /><published>2021-01-29T00:00:00-05:00</published><updated>2021-01-29T00:00:00-05:00</updated><id>https://www.makeworld.space/2021/01/lgpl_go</id><content type="html" xml:base="https://www.makeworld.space/2021/01/lgpl_go.html">&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Use the Mozilla Public License (MPL 2.0). It‚Äôs like the LGPL, but allows static linking.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I‚Äôm working on a dithering library in Go. I‚Äôll be releasing it soon, in a few weeks maybe,
and I‚Äôll write a post about it when that time comes. But it got me thinking about licensing,
and what license I should use for the library.&lt;/p&gt;

&lt;p&gt;The vast majority of libraries I‚Äôve seen stick to permissive licenses, mainly MIT. And I understand
why, it‚Äôs nice and simple, and you‚Äôre not gonna cause anyone any issues. But personally, I like using more
copyleft-style licenses for my libraries. I‚Äôm usually okay with some big company making proprietary
software that uses my library (although this hasn‚Äôt happened yet, so we‚Äôll see how I actually feel if it
does), but it‚Äôs important to me that any changes they make are made freely available. It‚Äôs only when that happens
that we can all benefit, in the spirit of FOSS. If someone could just come take my library, improve on it,
sell it as a product (or part of a product), and keep their improvements to themself, making sure only they
benefit, I‚Äôd feel terrible, and like there wasn‚Äôt much point in making the library at all.&lt;/p&gt;

&lt;p&gt;The GNU Lesser General Public License (LGPL) is the perfect license for this, it‚Äôs designed for libraries
and for allowing the integration of proprietary and free software. So why I am against it for Go code?&lt;/p&gt;

&lt;p&gt;Well just as I was deciding that the LGPL would be right for my upcoming library, I remembered something
I heard once about dynamic linking, or something. I looked into it, and found out that the LGPL requires
proprietary code to dynamically link to the LGPL‚Äôd library. Since I‚Äôm programming in Go, which pretty much
always statically links everything, this is not an option.&lt;/p&gt;

&lt;p&gt;Thankfully, I found &lt;a href=&quot;https://softwareengineering.stackexchange.com/q/179084&quot;&gt;these&lt;/a&gt;
&lt;a href=&quot;https://softwareengineering.stackexchange.com/q/221365&quot;&gt;two&lt;/a&gt; Software Engineering Stack Exchange questions,
and learned that there was another license that can do what I want, the Mozilla Public License (MPL 2.0).
I‚Äôd heard of this license before, but never had a reason to use it. But it seems it‚Äôs the perfect choice
for Go libraries. It‚Äôs very similar to the LGPL, but allows for static linking.&lt;/p&gt;

&lt;p&gt;There are some projects that allow dynamic linking by using the LGPL with a special clause, like
&lt;a href=&quot;https://www.wxwidgets.org/about/licence/&quot;&gt;wxWidgets&lt;/a&gt; and &lt;a href=&quot;http://wiki.zeromq.org/area:licensing&quot;&gt;ZeroMQ&lt;/a&gt;.
But modifying an existing license is not a trivial thing to do, and I Am not A Lawyer. It also means you‚Äôre on your own
if someone doesn‚Äôt follow the terms of the license. If you use a standard license then there will be existing
lawyers that understand it, and maybe even organizations like the FSF, Mozilla, etc, could help you out.&lt;/p&gt;

&lt;p&gt;ZeroMQ even says they prefer the MPL 2.0:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is the intention of the ZeroMQ community to move gradually towards the Mozilla Public License v2, as a replacement for the current LGPLv3 + static link exception.&lt;/p&gt;

  &lt;p&gt;MPLv2 offers largely the same advantages as our custom LGPLv3 + static link exception license, with the added advantage of being a standard license, thus easier for corporate lawyers to accept.&lt;/p&gt;

  &lt;p&gt;MPLv2 is the recommended license for new ZeroMQ projects, and where possible, ZeroMQ projects should collect approval from contributors to move towards MPLv2.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That‚Äôs good enough for me :)&lt;/p&gt;

&lt;p&gt;The one potential issue I did &lt;a href=&quot;https://softwareengineering.stackexchange.com/a/400544&quot;&gt;find&lt;/a&gt; with the MPL is
that it works on the file level. So it would be possible to write a new feature in a new file and not share it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For example, someone could take one of the main file of your project, add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import my_private_new_file&lt;/code&gt;, and
modify your main method for example by adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_private_new_file.newAwesomeFeature.run()&lt;/code&gt;&lt;/p&gt;

  &lt;p&gt;And this way he could add new features to your project while only releasing the modified main file and
keeping the actual logic of the new feature closed source in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_private_new_file&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But they also say:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Obviously, that‚Äôs an edge-case and it is quite unlikely someone would want to do that&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And I tend to agree. I definitely wouldn‚Äôt want someone trying to do that, but it‚Äôs clearly against the spirit
of the license, and would be legally risky. The MPL is a well established license, used by major
players, and it is preferred over the LGPL + static linking exception. All of that together is enough for me to
feel okay about this potential loophole.&lt;/p&gt;

&lt;p&gt;Onward and upward! Go forth and use the MPL 2.0 for Go libraries.&lt;/p&gt;</content><author><name></name></author><summary type="html">TL;DR: Use the Mozilla Public License (MPL 2.0). It‚Äôs like the LGPL, but allows static linking.</summary></entry><entry><title type="html">Introduction to Go Modules</title><link href="https://www.makeworld.space/2020/11/go_modules.html" rel="alternate" type="text/html" title="Introduction to Go Modules" /><published>2020-11-13T00:00:00-05:00</published><updated>2020-11-13T00:00:00-05:00</updated><id>https://www.makeworld.space/2020/11/go_modules</id><content type="html" xml:base="https://www.makeworld.space/2020/11/go_modules.html">&lt;p&gt;I‚Äôve seen many people online talk about liking &lt;a href=&quot;https://golang.org/&quot;&gt;Go&lt;/a&gt; and using it, but being confused by its dependency system,
called Go modules. This blog post aims to provide a simple introduction with examples. It focuses mostly
on Unix-based systems like Linux and macOS over Windows.&lt;/p&gt;

&lt;p&gt;This post does not cover all possible ways of using Go modules. It‚Äôs just a simple introduction with the most
common use cases.&lt;/p&gt;

&lt;h2 id=&quot;background-knowledge&quot;&gt;Background knowledge&lt;/h2&gt;

&lt;p&gt;You should know about &lt;a href=&quot;https://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt;. Pretty much all Go modules are expected
to follow it, and it will help you when upgrading modules or releasing your own.&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;I assume you already have Go installed. Go modules have preliminary support since Go 1.11, but Go module
support improves with with each release. I‚Äôd recommend installing at least Go 1.13, but install the 
latest version if you can.&lt;/p&gt;

&lt;p&gt;To begin the setup, you need to be aware of some environment variables. By default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GOPATH&lt;/code&gt; is set to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/go&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GOBIN&lt;/code&gt; is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/go/bin&lt;/code&gt;. I would not recommend changing this. There is also &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GOMODCACHE&lt;/code&gt;
(added in Go 1.15) which defaults to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GOPATH[0]/pkg/mod&lt;/code&gt;, which would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/go/pkg/mod&lt;/code&gt; if you don‚Äôt
change any variables. It holds the cache of modules you‚Äôve downloaded.&lt;/p&gt;

&lt;p&gt;There is one other variable, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GO111MODULE&lt;/code&gt;. This variable controls whether Go modules are enabled
and being used to manage dependencies. If it‚Äôs set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auto&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on&lt;/code&gt;, you should be good. If it‚Äôs
set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;off&lt;/code&gt;, then you must change it. If you‚Äôre using a Go version earlier than
1.13, you must set it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on&lt;/code&gt;, as the older &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auto&lt;/code&gt; behavior is not appropriate for this tutorial.&lt;/p&gt;

&lt;p&gt;To check your current setup, you can run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go env&lt;/code&gt; and see all the variables Go is working with.&lt;/p&gt;

&lt;h2 id=&quot;theory&quot;&gt;Theory&lt;/h2&gt;

&lt;p&gt;You can skip this section if you just want to start using Go modules. But this might be helpful for
people coming from other languages like Python or Rust.&lt;/p&gt;

&lt;p&gt;Most programming languages handle dependencies by having a official registry/repository of packages
that users can upload to. Think of PyPI, CPAN, NPM, crates.io, and more. Go takes a much more
decentralized approach. Modules can exist anywhere on the Web, and they are defined with an HTTP(S)
path.&lt;/p&gt;

&lt;p&gt;For example, a valid module path would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github.com/username/repo&lt;/code&gt;. It could also be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mydomain.com/foo&lt;/code&gt;.
In either case, to download the module Go will first try to download from a proxy (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GOPROXY&lt;/code&gt;), and then
fallback to looking at the HTML of the URL provided to find where the code lives. For more info on this
process and the HTML required, you can read more &lt;a href=&quot;https://golang.org/ref/mod#vcs&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will not need to bother with any of this for most Git hosting providers. GitHub, Gitlab, Gitea, etc.,
will all create the needed HTML for you, and you can just specify a module path like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github.com/username/repo&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-module&quot;&gt;Creating a module&lt;/h2&gt;

&lt;p&gt;First, your module needs a folder. To keep things simple, the path to this folder should double as its module
path. So if you‚Äôre using GitHub, your username is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt;, and your project is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt;, your project should
live at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$GOPATH/src/github.com/user/foo&lt;/code&gt;, which by default will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/go/src/github.com/user/foo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then go into your project folder and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go mod init&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GOPATH&lt;/span&gt;/src/github.com/user/foo
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GOPATH&lt;/span&gt;/src/github.com/user/foo
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go mod init
go: creating new go.mod: module github.com/user/foo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you‚Äôre really against this layout, you‚Äôre welcome to create your projects anywhere.
The only difference for this entire tutorial is that you run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go mod init&lt;/code&gt; differently. You will have to specify
the module path, since Go can‚Äôt infer it.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go mod init github.com/user/foo
go: creating new go.mod: module github.com/user/foo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go mod init&lt;/code&gt; will create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; file in the project folder. This is how Go declares its dependencies ‚Äì
with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; file, and also a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go.sum&lt;/code&gt; file that we‚Äôll see later. You should always be uploading these files
with the rest of your code.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;go.mod
module github.com/user/foo

go 1.15
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Besides declaring your dependencies, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; file also tells Go that this project really is a module, and gives
it its path.&lt;/p&gt;

&lt;p&gt;Most of the time you shouldn‚Äôt need to edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go.sum&lt;/code&gt; by hand. Instead you should let it be
changed by running commands.&lt;/p&gt;

&lt;h2 id=&quot;adding-dependencies&quot;&gt;Adding dependencies&lt;/h2&gt;

&lt;p&gt;Alright, now you have a project, presumably with some code, and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; file. Time to add some dependencies.
The main commands for that are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go get&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go mod tidy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go get&lt;/code&gt; to add dependencies. Here are some examples:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;go get github.com/bar/baz         &lt;span class=&quot;c&quot;&gt;# Latest version&lt;/span&gt;
go get github.com/bar/baz@master  &lt;span class=&quot;c&quot;&gt;# Latest commit on master&lt;/span&gt;
go get github.com/bar/baz@e0ffd3a &lt;span class=&quot;c&quot;&gt;# The module at commit e0ffd3a&lt;/span&gt;
go get github.com/bar/baz@v1.2.3  &lt;span class=&quot;c&quot;&gt;# Version 1.2.3 (using git tags)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go get&lt;/code&gt; accepts some other flags that I don‚Äôt need to cover here. One flag to avoid is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-u&lt;/code&gt;, as it updates all the
downstream dependencies of a module (not changing a major version), which could cause breakage.&lt;/p&gt;

&lt;p&gt;My suggestion would be to use the commit or tag syntax as much as possible, so that you know explicitly what version of
dependencies you‚Äôre adding, and to not use any flags.&lt;/p&gt;

&lt;p&gt;The other important command after adding dependencies is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go mod tidy&lt;/code&gt;. This command cleans up your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go.sum&lt;/code&gt;
files, removing unused entries and adding missing ones. It‚Äôs good to run this right after adding a dependency, and before
committing your code. You can run this command multiple times without any worry, if everything is in order than it will
just change nothing.&lt;/p&gt;

&lt;p&gt;You can now use the dependency you added in your code, using the module path.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;github.com/bar/baz&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dependencies-beyond-v1&quot;&gt;Dependencies beyond v1&lt;/h2&gt;

&lt;p&gt;This is the part that gets a bit trickier. In Go, the module path changes with every major version update. So the path
for v1.0.0 of baz, all the way to v1.99.99 of baz is still &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github.com/bar/baz&lt;/code&gt;. But once baz v2.0.0 is released, the
module path is now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github.com/bar/baz/v2&lt;/code&gt;. Note that‚Äôs not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@v2&lt;/code&gt;, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/v2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This happens because major versions are supposed to represent breaking changes. So it‚Äôs important to allow your project
to be able to use v2, while one of your dependencies still uses v1. This is achieved by making the module paths different.&lt;/p&gt;

&lt;p&gt;The only changes you need to make is to use a slightly different &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go get&lt;/code&gt; command, and to update your code import paths.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;go get github.com/bar/baz/v2         &lt;span class=&quot;c&quot;&gt;# Latest version of v2&lt;/span&gt;
go get github.com/bar/baz/v2@e0ffd3a &lt;span class=&quot;c&quot;&gt;# The module at commit e0ffd3a (must be a commit after v2 release)&lt;/span&gt;
go get github.com/bar/baz/v2@v2.2.3  &lt;span class=&quot;c&quot;&gt;# A specific v2 version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;github.com/bar/baz/v2&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Uses the new path&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Module name is still 'baz', not 'v2' or something&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;publishing-a-module&quot;&gt;Publishing a module&lt;/h2&gt;

&lt;p&gt;The simplest way to publish a module is to use git, and a git host. Examples include GitHub, Gitlab, sr.ht, etc. Upload
your Go code there, and make sure it has at least a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; file. Now anyone can use it as a module!&lt;/p&gt;

&lt;p&gt;You should probably have versioning though, and you can do that with git tags, or by using the releasing system on your
git host. For example, on GitHub you can click the Releases tab, and then ‚ÄúDraft a new release‚Äù.&lt;/p&gt;

&lt;p&gt;Doing simple tags with git is pretty easy as well:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git tag v1.2.3  &lt;span class=&quot;c&quot;&gt;# Whatever version this commit is&lt;/span&gt;
git push &lt;span class=&quot;nt&quot;&gt;--tags&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Make sure your release name follows &lt;a href=&quot;https://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt;, and starts with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v&lt;/code&gt;!&lt;/p&gt;

&lt;h2 id=&quot;major-version-updates-to-your-module&quot;&gt;Major version updates to your module&lt;/h2&gt;

&lt;p&gt;So, you‚Äôve been working on a v1 module for a while, but now you need to make a breaking change. This means you need to
release a new major version.&lt;/p&gt;

&lt;p&gt;Keep in mind, this is not required from v0 to v1, read about &lt;a href=&quot;https://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt;
to know why. But if you‚Äôre already on v1 and want to make a breaking change, then read on.&lt;/p&gt;

&lt;p&gt;There are a couple different ways to do this. Assuming you don‚Äôt need compatibility with Go versions older than 1.9.7 or 1.10.3,
than this method should work fine. If you do, you can read more &lt;a href=&quot;https://github.com/golang/go/wiki/Modules#releasing-modules-v2-or-higher&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;1. Update your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; file to include a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/v2&lt;/code&gt; at the end of the module path.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;go.mod
module github.com/user/foo/v2

go 1.15
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2. Update all your internal import statements to use the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/v2&lt;/code&gt; path. Anytime you import your own module in your code, you need
to update that import.&lt;/p&gt;

&lt;p&gt;3. Commit, push, tag, push tag.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Commit and push, and then...&lt;/span&gt;
git tag v2.0.0
git push &lt;span class=&quot;nt&quot;&gt;--tags&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;sources&quot;&gt;Sources&lt;/h2&gt;

&lt;p&gt;The Go blog has a series on using Go modules, here‚Äôs the &lt;a href=&quot;https://blog.golang.org/using-go-modules&quot;&gt;first post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The official Go Wiki has a &lt;a href=&quot;https://github.com/golang/go/wiki/Modules&quot;&gt;page on Modules&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is also an official &lt;a href=&quot;https://golang.org/ref/mod&quot;&gt;technical reference&lt;/a&gt;, which should be considered the definitive/primary
source for any info. It applies to Go 1.15 and later.&lt;/p&gt;</content><author><name></name></author><summary type="html">I‚Äôve seen many people online talk about liking Go and using it, but being confused by its dependency system, called Go modules. This blog post aims to provide a simple introduction with examples. It focuses mostly on Unix-based systems like Linux and macOS over Windows.</summary></entry></feed>